#!/usr/bin/env python3

import json

import bischoff_and_ratcliff_1995 as br95

# input parameters
OUTPUT_FILE_PATH = "instances.json"
NUMBER_OF_INSTANCES_PER_BOX_TYPE = 100
CONTAINER_DIMENSIONS = {
    "length": 587,
    "width": 233,
    "height": 220,
}  # the dimensions in cm of a 20 ft ISO container in 1995.
NUMBER_OF_DIFFERENT_BOX_TYPES_LIST = [3, 5, 8, 10, 12, 15, 20]  # n
BOX_DIMENSION_LOWER_LIMITS = [30, 25, 20]  # a_j, \forall j \in \{1, 2, 3\}
BOX_DIMENSION_UPPER_LIMITS = [120, 100, 80]  # b_j, \forall j \in \{1, 2, 3\}
BOX_STABILITY_LIMIT = 2  # L


def random_seed_generator(p):
    return 2502505 + 100 * (p - 1)


def set_name(instance_set_number):
    return f"set_{instance_set_number}"


def initialize_instances(number_of_different_box_types_list):
    return {
        set_name(instance_set_number): []
        for instance_set_number in range(1, len(number_of_different_box_types_list) + 1)
    }


if __name__ == "__main__":
    instances = initialize_instances(NUMBER_OF_DIFFERENT_BOX_TYPES_LIST)
    for instance_set_number, number_of_different_box_types in enumerate(
        NUMBER_OF_DIFFERENT_BOX_TYPES_LIST, start=1
    ):
        for instance_number in range(1, NUMBER_OF_INSTANCES_PER_BOX_TYPE + 1):
            instance = br95.Instance(
                C=CONTAINER_DIMENSIONS,
                n=number_of_different_box_types,
                a=BOX_DIMENSION_LOWER_LIMITS,
                b=BOX_DIMENSION_UPPER_LIMITS,
                L=BOX_STABILITY_LIMIT,
                s=random_seed_generator(instance_number),
            )
            instances[set_name(instance_set_number)].append(instance.to_dict())

    with open(OUTPUT_FILE_PATH, "w") as file:
        json.dump(instances, file, indent=2)
        print(f"instances written into '{OUTPUT_FILE_PATH}'")
